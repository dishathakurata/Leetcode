//Minimum adjacent swaps to alternate parity

class Solution {
    public int minSwaps(int[] nums) {
        List<Integer> even = new ArrayList<>();
        List<Integer> odd = new ArrayList<>();

        for(int i = 0; i < nums.length; i++) {
            if(nums[i] % 2 == 0) {
                even.add(i);
            }
            else {
                odd.add(i);
            }
        }

        if(Math.abs(even.size() - odd.size()) > 1) {
            return -1;
        }

        int res = Integer.MAX_VALUE;

        if(even.size() >= odd.size()) {
            res = Math.min(res, calculateSwaps(even, 0));
        }

        if(odd.size() >= even.size()) {
            res = Math.min(res, calculateSwaps(odd, 0));
        }

        return res;
    }

    private static int calculateSwaps(List<Integer> indices, int startIndex) {
        int swaps = 0;

        for(int i = 0; i < indices.size(); i++) {
            swaps += Math.abs(indices.get(i) - (startIndex + 2 * i));
        }
        return swaps;
    }
}
