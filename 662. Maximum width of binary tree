//662. Maximum width of binary tree

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

 class Pair {
    TreeNode node;
    int num;
    Pair(TreeNode _node, int _num) {
        node = _node;
        num = _num;
    }
}

class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) {
            return 0;
        }

        Queue<Pair> q = new LinkedList<>();
        int width = 0;
        q.offer(new Pair(root, 0));

        while(!q.isEmpty()) {
            int n = q.size();
            int min = q.peek().num;
            int first = 0, last = 0;

            for(int i = 0; i < n; i++) {
                int cur_num = q.peek().num - min;
                TreeNode cur_node = q.peek().node;
                q.poll();
                
                if(cur_node.left != null) {
                    q.offer(new Pair(cur_node.left, 2 * cur_num + 1));
                }

                if(cur_node.right != null) {
                    q.offer(new Pair(cur_node.right, 2 * cur_num + 2));
                }

                if(i == 0) {
                    first = cur_num;
                }

                if(i == n - 1)  {
                    last = cur_num;
                }
            }

            width = Math.max(last - first + 1, width);
        }

        return width;
    }
}
