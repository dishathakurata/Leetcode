//105. Construct binary tree from preorder and inorder traversal

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer, Integer> map = new HashMap<>();

        for(int i = 0; i < inorder.length; i++) {
            map.put(inorder[i], i);
        }

        TreeNode root = buildTreeRecur(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1, map);

        return root;
    }

    public TreeNode buildTreeRecur(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, Map<Integer, Integer> map) {
        if(preStart > preEnd || inStart > inEnd) {
            return null;
        }

        TreeNode root = new TreeNode(preorder[preStart]);
        int ind = map.get(root.val);
        int numsLeft = ind - inStart;

        root.left = buildTreeRecur(preorder, preStart + 1, preStart + numsLeft, inorder, inStart, ind - 1, map);
        root.right = buildTreeRecur(preorder, preStart + numsLeft + 1, preEnd, inorder, ind + 1, inEnd, map);

        return root;
    }
}
