//701. Insert into a binary search tree

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

//Solution 1: Recursion
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null) {
            return new TreeNode(val);
        }

        if(root.val > val) {
            root.left = insertIntoBST(root.left, val);
        }
        else {
            root.right = insertIntoBST(root.right, val);
        }

        return root;
    }
}

//Solution 2
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null) {
            return new TreeNode(val);
        }

        TreeNode cur = root;

        while(root != null) {
            if(root.val > val) {
                if(root.left != null) {
                    root = root.left;
                }
                else {
                    root.left = new TreeNode(val);
                    break;
                }
            }
            else {
                if(root.right != null) {
                    root = root.right;
                }
                else {
                    root.right = new TreeNode(val);
                    break;
                }
            }
        }

        return cur;
    }
}
