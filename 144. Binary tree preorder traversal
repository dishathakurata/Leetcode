//144. Binary tree preorder traversal

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public void preorder(TreeNode root, List<Integer> pre) {
        if(root == null) {
            return;
        }

        pre.add(root.val);
        preorder(root.left, pre);
        preorder(root.right, pre);
    }

    public List<Integer> preorderTraversal(TreeNode root) {
        //Solution 1
        List<Integer> pre = new ArrayList<>();

        preorder(root, pre);

        return pre;


        //Solution 2
        List<Integer> pre = new ArrayList<>();

        if(root == null) {
            return pre;
        }

        Stack<TreeNode> st = new Stack<>();

        st.push(root);

        while(!st.isEmpty()) {
            root = st.pop();

            pre.add(root.val);

            if(root.right != null) {
                st.push(root.right);
            }

            if(root.left != null) {
                st.push(root.left);
            }
        }

        return pre;
    }
}
