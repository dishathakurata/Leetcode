//199. Binary tree right side view

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

//Solution 1: Level-order traversal
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();

        if(root == null) {
            return ans;
        }

        q.offer(root);

        while(!q.isEmpty()) {
            List<Integer> subList = new ArrayList<>();
            int n = q.size();

            for(int i = 0; i < n; i++) {
                if(q.peek().left != null) {
                    q.offer(q.peek().left);
                }

                if(q.peek().right != null) {
                    q.offer(q.peek().right);
                }

                subList.add(q.poll().val);
            }

            ans.add(subList.get(subList.size() - 1));
        }

        return ans;
    }
}

//Solution 2: reversal Pre-order traversal
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        bfs(root, 0, ans);

        return ans;
    }

    public void bfs(TreeNode root, int level, List<Integer> ans) {
        if(root == null) {
            return;
        }

        if(level == ans.size()) {
            ans.add(root.val);
        }

        bfs(root.right, level + 1, ans);
        bfs(root.left, level + 1, ans);
    }
}
