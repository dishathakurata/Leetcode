//104. Maximum depth of binary tree

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

//Solution 1: Level-order traversal
class Solution {
    public int maxDepth(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        List<List<Integer>> ans = new LinkedList<List<Integer>>();

        if(root == null) {
            return 0;
        }

        q.offer(root);

        while(!q.isEmpty()) {
            int n = q.size();
            List<Integer> subList = new LinkedList<>();

            for(int i = 0; i < n; i++) {
                if(q.peek().left != null) {
                    q.offer(q.peek().left);
                }

                if(q.peek().right != null) {
                    q.offer(q.peek().right);
                }

                subList.add(q.poll().val);
            }

            ans.add(subList);
        }

        return ans.size();
    }
}

//Solution 2: Recursion
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) {
            return 0;
        }

        int left = maxDepth(root.left);
        int right = maxDepth(root.right);

        return Math.max(left, right) + 1;
    }
}
