//15. 3Sum

//Solution 1
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> ansSet = new HashSet<>();
        for(int i = 0; i < nums.length - 1; i++) {
            Set<Integer> set = new HashSet<>();

            for(int j = i + 1; j < nums.length; j++) {
                List<Integer> temp = new ArrayList<>();

                if(set.contains(0 - (nums[i] + nums[j]))) {
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(0 - (nums[i] + nums[j]));
                    Collections.sort(temp);
                    ansSet.add(temp);
                }
                else {
                    set.add(nums[j]);
                }
            }
        }

        List<List<Integer>> ans = new ArrayList<>(ansSet);

        return ans;
    }
}

//Solution 2
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);

        for(int i = 0; i < nums.length; i++) {
            if(i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }

            int j = i + 1;
            int k = nums.length - 1;

            while( j < k) {
                int sum = nums[i] + nums[j] + nums[k];

                if(sum < 0) {
                    j++;
                }
                else if( sum > 0) {
                    k--;
                }
                else {
                    List<Integer> temp = new ArrayList<>();

                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[k]);

                    ans.add(temp);

                    j++;
                    k--;

                    while(j < k && nums[j] == nums[j - 1]) {
                        j++;
                    }

                    while(j < k && nums[k] == nums[k + 1]) {
                        k--;
                    }
                }
            }
        }

        return ans;
    }
}
