//2583. kth largest sum in a binary tree

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public long kthLargestLevelSum(TreeNode root, int k) {
        List<Long> sums = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();

        queue.offer(root);
        
        while(!queue.isEmpty()) {
            long sum = 0;
            int size = queue.size();

            for(int i = 0; i < size; i++) {
                if(queue.peek().left != null) {
                    queue.offer(queue.peek().left);
                }

                if(queue.peek().right != null) {
                    queue.offer(queue.peek().right);
                }
                
                sum += queue.poll().val;
            }

            sums.add(sum);
        }

        Collections.sort(sums);

        if(k > sums.size()) {
            return -1;
        }

        return sums.get(sums.size() - k);
    }
}
