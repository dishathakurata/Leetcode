//450. Delete node in a BST

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root == null) {
            return null;
        }

        if(root.val == key) {
            return nextNode(root);
        }

        TreeNode cur = root;

        while(root != null) {
            if(root.val > key) {
                if(root.left != null && root.left.val == key) {
                    root.left = nextNode(root.left);
                    break;
                }
                else {
                    root = root.left;
                }
            }
            else {
                if(root.right != null && root.right.val == key) {
                    root.right = nextNode(root.right);
                    break;
                }
                else {
                    root = root.right;
                }
            }
        }

        return cur;
    }

    public TreeNode nextNode(TreeNode root) {
        if(root.left == null) {
            return root.right;
        }
        else if(root.right == null) {
            return root.left;
        }
        else {
            TreeNode rnode = root.right;
            TreeNode lnode = findLastR(root.left);
            lnode.right = rnode;

            return root.left;
        }
    }

    public TreeNode findLastR(TreeNode root) {
        if(root.right == null) {
            return root;
        }

        return findLastR(root.right);
    }
}
