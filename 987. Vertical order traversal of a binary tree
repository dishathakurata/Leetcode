//987. Vertical order traversal of a binary tree

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        Map<Integer, Map<Integer, List<Integer>>> map = new TreeMap<>();
        List<List<Integer>> ans = new ArrayList<>();

        mapFill(root, map, 0, 0);

        for(Map.Entry<Integer, Map<Integer, List<Integer>>> mapEl : map.entrySet()) {
            List<Integer> arr = new ArrayList<>();

            for(List<Integer> list : mapEl.getValue().values()) {
                Collections.sort(list);
                arr.addAll(list);
            }

            ans.add(arr);
        }

        return ans;
    }

    public void mapFill(TreeNode root, Map<Integer, Map<Integer, List<Integer>>> map, int i, int j) {
        if(root == null) {
            return;
        }

        map.computeIfAbsent(i, v -> new TreeMap<>()).computeIfAbsent(j, v -> new ArrayList<>()).add(root.val);

        if(root.left != null) {
            i--;
            j++;
            mapFill(root.left, map, i, j);
            i++;
            j--;
        }

        if(root.right != null) {
            i++;
            j++;
            mapFill(root.right, map, i, j);
            j--;
        }

        return;
    }
}
