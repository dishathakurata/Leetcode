//222. Count complete tree nodes

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

//Solution 1
class Solution {
    public int countNodes(TreeNode root) {
        if(root == null) {
            return 0;
        }

        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        int count = 1;

        while(!q.isEmpty()) {
            int n = q.size();

            for(int i = 0; i < n; i++) {
                TreeNode cur_node = q.poll();

                if(cur_node.left != null) {
                    q.offer(cur_node.left);
                    count++;
                }

                if(cur_node.right != null) {
                    q.offer(cur_node.right);
                    count++;
                }
            }
        }

        return count;
    }
}

//Solution 2
class Solution {
    int count = 0;
    
    public int countNodes(TreeNode root) {
        if(root == null) {
            return 0;
        }

        count++;
        countNodes(root.left);
        countNodes(root.right);

        return count;
    }
}

//Solution 3
class Solution {
    public int countNodes(TreeNode root) {
        if(root == null) {
            return 0;
        }

        int left = leftHeight(root);
        int right = rightHeight(root);

        if(left == right) {
            return ((2 << left) - 1);
        }

        return countNodes(root.left) + countNodes(root.right) + 1;
    }

    public int leftHeight(TreeNode root) {
        int count = 0;

        while(root.left != null) {
            count++;
            root = root.left;
        }

        return count;
    }

    public int rightHeight(TreeNode root) {
        int count = 0;

        while(root.right != null) {
            count++;
            root = root.right;
        }

        return count;
    }
}
