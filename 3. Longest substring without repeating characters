//3. Longest substring without repeating characters

//Solution 1
class Solution {
  public int lengthOfLongestSubstring(String s) {
      Set<Character> set = new HashSet<>();
      int max = 0;
      int left = 0;

      for(int right = 0; right < s.length(); right++) {
          char c = s.charAt(r);
          while(set.contains(c)) {
              set.remove(s.charAt(left));
              left++;
          }
          set.add(c);

          int len = right - left + 1;
          max = Math.max(max, len);
      }

      return max;
  }
}

//Solution 2
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Queue<String> q = new LinkedList<>();
        int i = 0, j = 1;
        String sub = "";
        int maxLen = 0;

        while(i < s.length() && j <= s.length()) {
            sub = s.substring(i, j);

            if(!q.contains(s.substring(j - 1, j)) || i == j) {
                q.add(s.substring(j - 1, j));
                j++;
                maxLen = Math.max(maxLen, sub.length());
            }
            else {
                i++;
                q.remove();
            }
        }

        return maxLen;
    }
}
