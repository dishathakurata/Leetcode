//Sum of largest prime substrings

class Solution {
    public long sumOfLargestPrimes(String s) {
        Set<Long> primeSet = new HashSet<>();
        int n = s.length();

        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j <= n; j++) {
                String sub = s.substring(i, j);

                try {
                    long num = Long.parseLong(sub);

                    if(isPrime(num)) {
                        primeSet.add(num);
                    }
                } catch (NumberFormatException e) {

                }
            }
        }

        List<Long> primes = new ArrayList<>(primeSet);
        primes.sort(Collections.reverseOrder());
        long sum = 0;

        for(int i = 0; i < Math.min(3, primes.size()); i++) {
            sum += primes.get(i);
        }

        return sum;
    }

    private static boolean isPrime(long num) {
        if(num <= 1) {
            return false;
        }

        if(num == 2) {
            return true;
        }

        if(num % 2 == 0) {
            return false;
        }

        long sqrt = (long)Math.sqrt(num);

        for(long i = 3; i <= sqrt; i += 2) {
            if(num % i == 0) {
                return false;
            }
        }

        return true;
    }
}
