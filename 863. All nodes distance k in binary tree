//863. All nodes distance k in binary tree

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

class Solution {
    public void parentTrack(Map<TreeNode, TreeNode> parents, TreeNode root){
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);

        while(!q.isEmpty()) {
            int n = q.size();

            for(int i = 0; i < n; i++) {
                TreeNode cur_node = q.poll();

                if(cur_node.left != null) {
                    parents.put(cur_node.left, cur_node);
                    q.offer(cur_node.left);
                }

                if(cur_node.right != null) {
                    parents.put(cur_node.right, cur_node);
                    q.offer(cur_node.right);
                }
            }
        }
    }

    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<TreeNode, TreeNode> parents = new HashMap<>();
        parentTrack(parents, root);
        Map<TreeNode, Boolean> visited = new HashMap<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(target);
        visited.put(target, true);
        int cur_level = 0;

        while(!q.isEmpty()) {
            int n = q.size();
            
            if(cur_level == k) {
                break;
            }

            cur_level++;

            for(int i = 0; i < n; i++) {
                TreeNode cur_node = q.poll();

                if(cur_node.left != null && !visited.containsKey(cur_node.left)) {
                    q.offer(cur_node.left);
                    visited.put(cur_node.left, true);
                }

                if(cur_node.right != null && !visited.containsKey(cur_node.right)) {
                    q.offer(cur_node.right);
                    visited.put(cur_node.right, true);
                }

                if(parents.get(cur_node) != null && !visited.containsKey(parents.get(cur_node))) {
                    q.offer(parents.get(cur_node));
                    visited.put(parents.get(cur_node), true);
                }
            }
        }

        List<Integer> ans = new ArrayList<>();

        while(!q.isEmpty()) {
            ans.add(q.poll().val);
        }

        return ans;
    }
}
