//94. Binary tree inorder traversal

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

//Solution 1: Recursion
class Solution {
    public void inorder(TreeNode root, List<Integer> in) {
        if(root == null) {
            return;
        }

        inorder(root.left, in);
        in.add(root.val);
        inorder(root.right, in);
    }
    
    public List<Integer> inorderTraversal(TreeNode root) {
        //Solution 1
        List<Integer> in = new ArrayList<>();

        inorder(root, in);

        return in;


        //Solution 2
        List<Integer> in = new ArrayList<>();
        Stack<TreeNode> st = new Stack<>();
        TreeNode node = root;

        while(true) {
            if(node != null) {
                st.push(node);
                node = node.left;
            }
            else {
                if(st.isEmpty()) {
                    break;
                }
                else {
                    node = st.pop();
                    in.add(node.val);
                    node = node.right;
                }
            }
        }

        return in;
    }
}

//Solution 2: Morris
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorder = new ArrayList<>();
        TreeNode cur = root;

        while(cur != null) {
            if(cur.left == null) {
                inorder.add(cur.val);
                cur = cur.right;
            }
            else {
                TreeNode prev = cur.left;

                while(prev.right != null && prev.right != cur) {
                    prev = prev.right;
                }

                if(prev.right == cur) {
                    prev.right = null;
                    inorder.add(cur.val);
                    cur = cur.right;
                }
                else {
                    prev.right = cur;
                    cur = cur.left;
                }
            }
        }

        return inorder;
    }
}
